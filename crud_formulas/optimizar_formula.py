# ------------------------------------------------------------------------------
# FORMULATOR ‚Äì Uso exclusivo de Iv√°n Navarro
# Todos los derechos reservados ¬© 2025
# Este archivo forma parte de un software no libre y no est√° autorizado su uso
# ni distribuci√≥n sin consentimiento expreso y por escrito del autor.
# ------------------------------------------------------------------------------
import streamlit as st
import pandas as pd
from utils.supabase_client import supabase
from utils.families import obtener_familias_parametros
from utils.ejecutar_motor import ejecutar_motor
from utils.formula_resultados import calcular_resultado_formula
from utils.resultados import mostrar_resultados
from utils.data_loader import cargar_datos
import plotly.express as px

def flujo_optimizar_formula():
    st.title("üßÆ Optimizaci√≥n de F√≥rmulas")

    df = cargar_datos()

    if df.empty or "Materia Prima" not in df.columns:
        st.error("No hay materias primas disponibles o falta la columna 'Materia Prima'.")
        return

    seleccionadas = st.multiselect("Selecciona materias primas para optimizar", df["Materia Prima"].dropna().tolist())
    if not seleccionadas:
        st.info("Selecciona al menos una materia prima para empezar.")
        return

    df_seleccion = df[df["Materia Prima"].isin(seleccionadas)].copy()

    familias = obtener_familias_parametros()
    seleccionadas_familias = st.multiselect("Selecciona familias de par√°metros", list(familias), default=list(familias))
    columnas_tecnicas = [col for fam in seleccionadas_familias for col in familias[fam] if col in df.columns]

    columnas_param_opt = [col for col in columnas_tecnicas if df_seleccion[col].fillna(0).gt(0).any()]
    columnas_restricciones = st.multiselect("Selecciona par√°metros a restringir", columnas_param_opt)

    restricciones = {}
    for col in columnas_restricciones:
        valores = df_seleccion[col].fillna(0)
        min_val = float(valores.min())
        max_val = float(valores.max())
        val_min, val_max = st.slider(f"Rango para {col} (%)", min_value=min_val, max_value=max_val, value=(min_val, max_val), step=0.01)
        restricciones[col] = {"min": val_min, "max": val_max}

    modo = st.radio("Tipo de optimizaci√≥n", ["Minimizar", "Maximizar"], horizontal=True)

    opciones_objetivo = ["Precio ‚Ç¨/kg"] + columnas_param_opt + seleccionadas
    variable_objetivo = st.selectbox("Selecciona la variable objetivo", opciones_objetivo)

    #motores = st.multiselect("Selecciona motores de optimizaci√≥n", ["Simplex", "SLSQP", "COBYLA", "Gen√©tico"], default=["Simplex"])
    motores = st.multiselect("Selecciona motores de optimizaci√≥n", ["Simplex"], default=["Simplex"])
    parametros_extra = {}
    
    if "COBYLA" in motores:
        with st.expander("‚öôÔ∏è Par√°metros COBYLA"):
            maxfun = st.number_input("M√°ximo de evaluaciones (maxfun)", min_value=100, max_value=10000, value=1000, step=100)
            parametros_extra["COBYLA"] = {"maxfun": maxfun}


    if "Gen√©tico" in motores:
        with st.expander("‚öôÔ∏è Par√°metros del algoritmo gen√©tico", expanded=False):
            n_ind = st.slider("N√∫mero de individuos", 10, 200, value=50, step=10)
            n_gen = st.slider("N√∫mero de generaciones", 10, 300, value=100, step=10)
            cxpb = st.slider("Probabilidad de cruce (cxpb)", 0.0, 1.0, value=0.7, step=0.05)
            mutpb = st.slider("Probabilidad de mutaci√≥n (mutpb)", 0.0, 1.0, value=0.2, step=0.05)
    
            parametros_extra["Gen√©tico"] = {
                "n_individuos": n_ind,
                "n_generaciones": n_gen,
                "cxpb": cxpb,
                "mutpb": mutpb
            }



    if st.button("üîß Ejecutar optimizaci√≥n"):
        restricciones_min = {k: v["min"] for k, v in restricciones.items()}
        restricciones_max = {k: v["max"] for k, v in restricciones.items()}

        st.session_state.resultados_optimizacion = []
        for motor in motores:
            resultado = ejecutar_motor(
                motor=motor,
                df=df_seleccion,
                columnas_objetivo=columnas_tecnicas,
                restricciones_min=restricciones_min,
                restricciones_max=restricciones_max,
                variable_objetivo=variable_objetivo,
                modo=modo,
                parametros_extra=parametros_extra
            )
            st.session_state.resultados_optimizacion.append(resultado)

    # Si hay resultados guardados
    if "resultados_optimizacion" in st.session_state:
        resultados = st.session_state.resultados_optimizacion

        # üìä Tabla comparativa
        tabla = []
        for r in resultados:
            unidad = "‚Ç¨/kg" if variable_objetivo == "Precio ‚Ç¨/kg" else "% p/p"
            tabla.append({
                "Motor": r["motor"],
                "Resultado": round(r["valor_objetivo"], 3) if r["exito"] else None,
                "Unidad": unidad if r["exito"] else "",
                "Estado": "‚úÖ √âxito" if r["exito"] else f"‚ùå {r['mensaje']}"
            })

 

        st.markdown("## üìã Comparativa de motores")
        st.dataframe(pd.DataFrame(tabla))

        # üîç Mostrar resultados individuales en cajas expandibles
        st.markdown("## üîé Resultados detallados por motor")
        for r in resultados:
            if r["exito"]:
                with st.expander(f"üîπ {r['motor']} ‚Äì Resultado: {r['valor_objetivo']:.3f}", expanded=False):
                    st.markdown(f"### üì¶ F√≥rmula optimizada con **{r['motor']}**")
                    st.dataframe(r["df"][["Materia Prima", "%", "Precio ‚Ç¨/kg"] + columnas_tecnicas])

                    _, composicion = calcular_resultado_formula(r["df"], columnas_tecnicas)
                    columnas_mayor_0 = composicion[composicion["Cantidad %"] > 0].index.tolist()
                    mostrar_resultados(r["df"], columnas_mayor_0)

       # üìà Comparaci√≥n visual de composiciones
        st.markdown("## üìä Comparaci√≥n visual de par√°metros t√©cnicos")
        
        # üëâ Construir df_comp antes del gr√°fico
        comp_all = {}
        for r_ in resultados:
            if r_["exito"]:
                _, comp = calcular_resultado_formula(r_["df"], columnas_tecnicas)
                comp_all[r_["motor"]] = comp["Cantidad %"]
        df_comp = pd.DataFrame(comp_all).fillna(0)
        
        # üîò Selector de tipo de gr√°fico
        tipo_grafico = st.selectbox("Tipo de visualizaci√≥n", ["Barras agrupadas", "Mapa de calor"])
        
        # Filtrar par√°metros significativos
        df_filtrado = df_comp[df_comp.max(axis=1) > 0.5]
        
        if df_filtrado.empty:
            st.info("No hay par√°metros con valores suficientes para mostrar.")
        else:
            if tipo_grafico == "Barras agrupadas":
                st.bar_chart(df_filtrado.T)
        
            elif tipo_grafico == "Mapa de calor":
                fig = px.imshow(
                    df_filtrado,
                    labels=dict(x="Motor", y="Par√°metro t√©cnico", color="% p/p"),
                    x=df_filtrado.columns,
                    y=df_filtrado.index,
                    color_continuous_scale="RdYlGn",  # m√°s claro que YlGnBu
                    text_auto=".1f"
                )
                fig.update_layout(
                    title="Mapa de calor de par√°metros t√©cnicos por motor",
                    xaxis_title="Motor",
                    yaxis_title="Par√°metro t√©cnico",
                    height=600
                )
                st.plotly_chart(fig, use_container_width=True)


        
